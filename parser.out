Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> atomo
Rule 1     atomo -> STRING
Rule 2     atomo -> NUM
Rule 3     atomo -> ALFNUM
Rule 4     lista -> LPAREN RPAREN
Rule 5     lista -> LPAREN atomo RPAREN
Rule 6     lista -> LPAREN atomo SPACE atomo RPAREN
Rule 7     lista -> LPAREN atomo SPACE atomo SPACE lista RPAREN
Rule 8     lista -> LPAREN atomo SPACE atomo SPACE lista SPACE atomo RPAREN
Rule 9     first -> LPAREN APPLY SPACE FIRST lista RPAREN
Rule 10    rest -> LPAREN APPLY SPACE REST lista RPAREN
Rule 11    cons -> LPAREN APPLY SPACE CONS lista RPAREN
Rule 12    plus -> LPAREN APPLY SPACE PLUS lista RPAREN
Rule 13    times -> LPAREN APPLY SPACE TIMES lista RPAREN
Rule 14    divide -> LPAREN APPLY SPACE DIVIDE lista RPAREN
Rule 15    minus -> LPAREN APPLY SPACE MINUS lista RPAREN
Rule 16    max -> LPAREN APPLY SPACE MAX lista RPAREN
Rule 17    min -> LPAREN APPLY SPACE MIN lista RPAREN
Rule 18    append -> LPAREN APPLY SPACE APPEND LPAREN lista SPACE lista RPAREN RPAREN

Terminals, with rules where they appear

ALFNUM               : 3
APPEND               : 18
APPLY                : 9 10 11 12 13 14 15 16 17 18
CONS                 : 11
DIVIDE               : 14
FIRST                : 9
LPAREN               : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 18
MAX                  : 16
MIN                  : 17
MINUS                : 15
NUM                  : 2
PLUS                 : 12
REST                 : 10
RPAREN               : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 18
SPACE                : 6 7 7 8 8 8 9 10 11 12 13 14 15 16 17 18 18
STRING               : 1
TIMES                : 13
error                : 

Nonterminals, with rules where they appear

append               : 
atomo                : 5 6 6 7 7 8 8 8 0
cons                 : 
divide               : 
first                : 
lista                : 7 8 9 10 11 12 13 14 15 16 17 18 18
max                  : 
min                  : 
minus                : 
plus                 : 
rest                 : 
times                : 

Parsing method: LALR

state 0

    (0) S' -> . atomo
    (1) atomo -> . STRING
    (2) atomo -> . NUM
    (3) atomo -> . ALFNUM

    STRING          shift and go to state 2
    NUM             shift and go to state 3
    ALFNUM          shift and go to state 4

    atomo                          shift and go to state 1

state 1

    (0) S' -> atomo .



state 2

    (1) atomo -> STRING .

    $end            reduce using rule 1 (atomo -> STRING .)


state 3

    (2) atomo -> NUM .

    $end            reduce using rule 2 (atomo -> NUM .)


state 4

    (3) atomo -> ALFNUM .

    $end            reduce using rule 3 (atomo -> ALFNUM .)

